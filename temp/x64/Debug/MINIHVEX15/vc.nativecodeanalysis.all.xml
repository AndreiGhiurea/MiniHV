<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>dmp_common.c</FILENAME>
      <LINE>18</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26165</DEFECTCODE>
    <DESCRIPTION>Possibly failing to release lock 'm_dumpLock' in function 'DumpTakeLock'.</DESCRIPTION>
    <FUNCTION>DumpTakeLock</FUNCTION>
    <DECORATED>DumpTakeLock</DECORATED>
    <FUNCLINE>18</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>dmp_common.c</FILENAME>
        <LINE>18</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>dmp_common.c</FILENAME>
        <LINE>22</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>dmp_common.c</FILENAME>
        <LINE>24</LINE>
        <COLUMN>4</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>dmp_common.c</FILENAME>
        <LINE>26</LINE>
        <COLUMN>4</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>dmp_common.c</FILENAME>
        <LINE>18</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>display.c</FILENAME>
      <LINE>38</LINE>
      <COLUMN>47</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>DispPreinitScreen</FUNCTION>
    <DECORATED>DispPreinitScreen</DECORATED>
    <FUNCLINE>31</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>display.c</FILENAME>
      <LINE>85</LINE>
      <COLUMN>117</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>DispPrintString</FUNCTION>
    <DECORATED>DispPrintString</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>display.c</FILENAME>
      <LINE>85</LINE>
      <COLUMN>100</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>DispPrintString</FUNCTION>
    <DECORATED>DispPrintString</DECORATED>
    <FUNCLINE>46</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>display.c</FILENAME>
      <LINE>119</LINE>
      <COLUMN>148</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>_DispScrollScreen</FUNCTION>
    <DECORATED>_DispScrollScreen</DECORATED>
    <FUNCLINE>111</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>display.c</FILENAME>
      <LINE>123</LINE>
      <COLUMN>4</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>_DispScrollScreen</FUNCTION>
    <DECORATED>_DispScrollScreen</DECORATED>
    <FUNCLINE>111</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>dmp_memory.c</FILENAME>
      <LINE>55</LINE>
      <COLUMN>77</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>DumpMemory</FUNCTION>
    <DECORATED>DumpMemory</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex\headers</FILEPATH>
      <FILENAME>dmp_common.h</FILENAME>
      <LINE>11</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>28285</DEFECTCODE>
    <DESCRIPTION>For function 'DumpTakeLock' 'return' syntax error in 'SAL_requires_lock_not_held((m_dumpLock))' near 'm_dumpLock))'.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex\headers</FILEPATH>
      <FILENAME>dmp_common.h</FILENAME>
      <LINE>18</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>28285</DEFECTCODE>
    <DESCRIPTION>For function 'DumpReleaseLock' 'return' syntax error in 'SAL_requires_exclusive_lock_held((m_dumpLock))' near 'm_dumpLock))'.</DESCRIPTION>
    <FUNCTION></FUNCTION>
    <DECORATED></DECORATED>
    <FUNCLINE>0</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>hv_heap.c</FILENAME>
      <LINE>28</LINE>
      <COLUMN>23</COLUMN>
    </SFA>
    <DEFECTCODE>26130</DEFECTCODE>
    <DESCRIPTION>Missing annotation _Requires_lock_held_(m_hvHeap.HeapLock) or _No_competing_thread_ at function 'HvInitHeap'. Otherwise it could be a race condition. Variable 'm_hvHeap.Heap' should be protected by lock 'm_hvHeap.HeapLock'.</DESCRIPTION>
    <FUNCTION>HvInitHeap</FUNCTION>
    <DECORATED>HvInitHeap</DECORATED>
    <FUNCLINE>15</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>15</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>20</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>22</LINE>
        <COLUMN>4</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>24</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>26</LINE>
        <COLUMN>4</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>28</LINE>
        <COLUMN>23</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>hv_heap.c</FILENAME>
      <LINE>54</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26130</DEFECTCODE>
    <DESCRIPTION>Missing annotation _Requires_lock_held_(m_hvHeap.HeapLock) or _No_competing_thread_ at function 'HvAllocPoolWithTag'. Otherwise it could be a race condition. Variable 'm_hvHeap.Heap' should be protected by lock 'm_hvHeap.HeapLock'.</DESCRIPTION>
    <FUNCTION>HvAllocPoolWithTag</FUNCTION>
    <DECORATED>HvAllocPoolWithTag</DECORATED>
    <FUNCLINE>45</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>45</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>52</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>54</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>hv_heap.c</FILENAME>
      <LINE>74</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26130</DEFECTCODE>
    <DESCRIPTION>Missing annotation _Requires_lock_held_(m_hvHeap.HeapLock) or _No_competing_thread_ at function 'HvFreePoolWithTag'. Otherwise it could be a race condition. Variable 'm_hvHeap.Heap' should be protected by lock 'm_hvHeap.HeapLock'.</DESCRIPTION>
    <FUNCTION>HvFreePoolWithTag</FUNCTION>
    <DECORATED>HvFreePoolWithTag</DECORATED>
    <FUNCLINE>68</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>68</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>hv_heap.c</FILENAME>
        <LINE>74</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>idt_handlers.c</FILENAME>
      <LINE>194</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>6101</DEFECTCODE>
    <DESCRIPTION>Returning uninitialized memory '*IdtEntries'.  A successful path through the function does not set the named _Out_ parameter. </DESCRIPTION>
    <FUNCTION>CreateDummyDescriptors</FUNCTION>
    <DECORATED>CreateDummyDescriptors</DECORATED>
    <FUNCLINE>194</FUNCLINE>
    <PROBABILITY>1</PROBABILITY>
    <RANK>3</RANK>
    <CATEGORY>
      <RULECATEGORY>mspft</RULECATEGORY>
    </CATEGORY>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>idt_handlers.c</FILENAME>
        <LINE>194</LINE>
        <COLUMN>0</COLUMN>
        <KEYEVENT>
          <ID>1</ID>
          <KIND>declaration</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*IdtEntries' is not initialized</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>idt_handlers.c</FILENAME>
        <LINE>199</LINE>
        <COLUMN>10</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>idt_handlers.c</FILENAME>
        <LINE>201</LINE>
        <COLUMN>4</COLUMN>
        <KEYEVENT>
          <ID>2</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>Enter this branch, (assume '(((void *)0))!=IdtEntries')</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>idt_handlers.c</FILENAME>
        <LINE>202</LINE>
        <COLUMN>4</COLUMN>
        <KEYEVENT>
          <ID>3</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>Enter this branch, (assume '_Param_(0)')</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>idt_handlers.c</FILENAME>
        <LINE>206</LINE>
        <COLUMN>11</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>idt_handlers.c</FILENAME>
        <LINE>206</LINE>
        <COLUMN>18</COLUMN>
        <KEYEVENT>
          <ID>4</ID>
          <KIND>branch</KIND>
          <IMPORTANCE>Full</IMPORTANCE>
          <MESSAGE>Skip this loop, (assume 'i&lt;NumberOfEntries' is false)</MESSAGE>
        </KEYEVENT>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>idt_handlers.c</FILENAME>
        <LINE>194</LINE>
        <COLUMN>0</COLUMN>
        <KEYEVENT>
          <ID>5</ID>
          <KIND>usage</KIND>
          <IMPORTANCE>Essential</IMPORTANCE>
          <MESSAGE>'*IdtEntries' is an _Out_ parameter that may not have been assigned to</MESSAGE>
        </KEYEVENT>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>lock.c</FILENAME>
      <LINE>7</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26165</DEFECTCODE>
    <DESCRIPTION>Possibly failing to release lock '* Lock' in function 'AcquireLock'.</DESCRIPTION>
    <FUNCTION>AcquireLock</FUNCTION>
    <DECORATED>AcquireLock</DECORATED>
    <FUNCLINE>7</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>lock.c</FILENAME>
        <LINE>7</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>lock.c</FILENAME>
        <LINE>11</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>lock.c</FILENAME>
        <LINE>13</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>lock.c</FILENAME>
        <LINE>7</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>lock.c</FILENAME>
      <LINE>21</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26110</DEFECTCODE>
    <DESCRIPTION>Caller failing to hold lock '* Lock' before calling function 'icall'.</DESCRIPTION>
    <FUNCTION>ReleaseLock</FUNCTION>
    <DECORATED>ReleaseLock</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>lock.c</FILENAME>
        <LINE>17</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>lock.c</FILENAME>
        <LINE>21</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>lock.c</FILENAME>
      <LINE>17</LINE>
      <COLUMN>0</COLUMN>
    </SFA>
    <DEFECTCODE>26167</DEFECTCODE>
    <DESCRIPTION>Possibly releasing unheld lock '* Lock' in function 'ReleaseLock'.</DESCRIPTION>
    <FUNCTION>ReleaseLock</FUNCTION>
    <DECORATED>ReleaseLock</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>lock.c</FILENAME>
        <LINE>17</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>lock.c</FILENAME>
        <LINE>21</LINE>
        <COLUMN>15</COLUMN>
      </SFA>
      <SFA>
        <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
        <FILENAME>lock.c</FILENAME>
        <LINE>17</LINE>
        <COLUMN>0</COLUMN>
      </SFA>
    </PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>vmcs.c</FILENAME>
      <LINE>582</LINE>
      <COLUMN>10</COLUMN>
    </SFA>
    <DEFECTCODE>6326</DEFECTCODE>
    <DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION>
    <FUNCTION>VmcsInitializeVMXControls</FUNCTION>
    <DECORATED>VmcsInitializeVMXControls</DECORATED>
    <FUNCLINE>494</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\tdxx58c\desktop\minihv\src\minihvex</FILEPATH>
      <FILENAME>vmmemory.c</FILENAME>
      <LINE>262</LINE>
      <COLUMN>35</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>SimulateInt15h</FUNCTION>
    <DECORATED>SimulateInt15h</DECORATED>
    <FUNCLINE>176</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>